unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
mutate(Date = map2(from = as.Date(InDate), to = as.Date(OutDate), by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
mutate(Date = map2(from = as.Date(InDate), to = as.Date(OutDate),seq, by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(patient,unit,Date = map2(as.Date(InDate), to = as.Date(OutDate),seq, by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(patient,unit,Date = map2(mdy(InDate), to = mdy(OutDate),seq, by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(Date = map2(mdy(InDate), to = mdy(OutDate),seq, by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(Date = map2(mdy(InDate), to = mdy(OutDate), by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(Date = map2(mdy(InDate), mdy(OutDate), by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
transmute(Date = map2(mdy(InDate), mdy(OutDate), seq, by = "day")) %>%
unnest(cols = Date) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
View(sub)
unit_dates <- sub %>%
rowwise %>%
transmute(Date = list(seq(InDate, OutDate, seq, by = "day"))) %>%
unnest(cols = c(Date)) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
unit_dates <- sub %>%
rowwise %>%
transmute(Date = list(seq(InDate, OutDate, by = "day"))) %>%
unnest(cols = c(Date)) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
View(sub)
unit_dates <- sub %>%
rowwise %>%
transmute(Date = list(seq(InDate, OutDate, by = "day"))) #%>%
View(unit_dates)
unit_dates <- sub %>%
rowwise %>%
mutate(Date = list(seq(InDate, OutDate, by = "day"))) %>%
unnest(cols = c(Date)) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
View(unit_dates)
unit_dates <- selected_unit %>%
rowwise %>%
mutate(Date = list(seq(InDate, OutDate, by = "day"))) %>%
unnest(cols = c(Date)) %>%
group_by(Date, patient) %>%
summarise(count = n_distinct(patient), .groups = 'drop')
selected_unit <- sub[sub$unit == input$unit,c("patient", "unit","InDate","OutDate")]
View(unit_dates)
ggplot(unit_dates,aes(Date,count))+
geom_bar(stat="identity",aes(fill=patient))+
theme(axis.text.x = element_text(angle=90,size=10),panel.grid = element_blank())+
labs(y="No of links")+
scale_x_date(date_breaks = "1 month", date_labels = "%b-%y")
ggplot(unit_dates,aes(Date,count))+
geom_bar(stat="identity",aes(fill=patient))+
theme(axis.text.x = element_text(angle=90,size=10),panel.grid = element_blank())+
labs(y="No of links")+
scale_x_date(date_breaks = "1 month", date_labels = "%b-%y")
runApp()
runApp()
runApp()
View(OverlapCalc)
View(OverlapCalc)
runApp()
runApp()
View(OverlapCalc)
source("I:/EpiLinx/EpiLinx v1.3.2 - LPR3 - for pub/EpiLinx for pub dev environment/Functions/OverlapCalc.R", echo=TRUE)
source("I:/EpiLinx/EpiLinx v1.3.2 - LPR3 - for pub/EpiLinx for pub dev environment/Functions/OverlapCalc.R", echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
source("I:/EpiLinx/EpiLinx v1.3.2 - LPR3 - for pub/EpiLinx for pub dev environment/Functions/OverlapCalc.R", echo=TRUE)
if(n_days == 0){
location_dt <- location_dt %>% select(-Difference_days)
}else{
location_dt <- location_dt %>% select(-Duration_days)
}
runApp()
runApp()
runApp()
location_dt <- location_dt %>% select(-Duration_days) %>%
filter(Difference_days > 0) %>%
rename(Patient.2.Start = Start, Patient.1.End = End)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Matrix4Viz)
View(Tbl4Viz)
sub("\\D+","", unique(sub$patient))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
filter(tmp_days %in% c(tmp_procedure,tmp_death)) %>%
mutate(Event =
case_when(tmp_days %in% tmp_procedure ~ "Sampling date",
tmp_days %in% tmp_death ~ "Death date")) %>%
select(Patient = patient, Date = tmp_days, Event, unit) %>%
arrange(Patient)
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days)
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
filter(tmp_days %in% c(tmp_procedure,tmp_death))# %>%
View(sub)
runApp()
runApp()
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
filter(tmp_days %in% tmp_procedure| tmp_days %in% tmp_death))# %>%
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
filter(tmp_days %in% tmp_procedure| tmp_days %in% tmp_death)# %>%
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
filter(tmp_days %in% tmp_procedure)#| tmp_days %in% tmp_death)# %>%
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died))# %>%
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(as.Date(`Sample date`)),
tmp_death = list(Died))# %>%
View(procedure)
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
mutate(Event =
case_when(tmp_days %in% tmp_procedure ~ "Sampling date",
tmp_days %in% tmp_death ~ "Death date")) %>%
select(Patient = patient, Date = tmp_days, Event, unit) %>%
arrange(Patient)
View(procedure)
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(`Sample date`),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
mutate(Event =
case_when(tmp_days %in% tmp_procedure ~ "Sampling date",
tmp_days %in% tmp_death ~ "Death date"))
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
rowwise %>%
mutate(tmp_days = list(seq(InDate, OutDate, by = "day")),
tmp_procedure = list(as.Date(`Sample date`)),
tmp_death = list(Died)) %>%
unnest(tmp_days) %>%
mutate(Event =
case_when(tmp_days %in% tmp_procedure ~ "Sampling date",
tmp_days %in% tmp_death ~ "Death date"))
View(procedure)
View(procedure)
View(sub)
#### Prepare procedure ####
procedure <- sub %>%
select(patient,`Sample date`,Died,unit)%>%
filter(!is.na(`Sample date`)|!is.na(Died))
View(procedure)
runApp()
#### Prepare procedure ####
procedure <- sub %>%
select(patient,`Sample date`,Died,unit)%>%
filter(!is.na(`Sample date`)&!is.na(Died))
#### Prepare procedure ####
procedure <- sub %>%
gather(key = "Event", value = "Date", `Sample date`, Died)%>%
filter(!is.na(Date))%>%
mutate(Event = ifelse(Event == "Died", "Death date", "Sampling date")) %>%
select(patient,Date,unit, Event)%>%
# proc <-  matrix(data=NA, nrow=length(rownames(ResMat)), ncol = length(colnames(ResMat)))
# proc_pt <- rownames(ResMat)
# proc_dates <- as.Date(colnames(ResMat))
# proc_days<- unique(sub$`Sample date`)
# rownames(proc) <- proc_pt
# colnames(proc) <- proc_dates
#
# # Procedure center
# proc_center <- matrix(data=NA, nrow=length(rownames(ResMat)), ncol = length(proc_days))
# rownames(proc_center) <- proc_pt
# colnames(proc_center) <- proc_days
# #Prepare death dates
# df_DD <- NULL
# death_filt <- NULL
# if(!all(is.na(sub$Died))){
#   df_DD <- sub%>%filter(!is.na(sub$Died))
#   death_pt <- unique(df_DD$patient)
#   death_dates <- seq(min(as.Date(df_DD$Died)),max(as.Date(df_DD$Died)),by="day")
#
#   death <- matrix(data=NA, nrow=length(death_pt), ncol = length(death_dates))
#
#   rownames(death) <- death_pt
#   colnames(death) <- death_dates
#   # Add death dates
#   for (i in  1:nrow(df_DD)){
#     tempDeath=seq(min(as.Date(df_DD$Died[i])),max(as.Date(df_DD$Died[i])), "day")
#     coldeath=which(death_dates %in% tempDeath)
#     rowdeath =which(death_pt %in% df_DD$patient[i])
#     death[rowdeath,coldeath] = df_DD$Died[i]
#   }
#
#   colnames(death) <- format(as.Date(death_dates, format= "%Y-%m-%d"), format= "%Y-%m-%d")
#   death_filt <- melt(as.table(death))
#   colnames(death_filt) <- c("Patient", "Date", "Died")
#   death_filt <- death_filt[complete.cases(death_filt),]
#   death_filt$Date <- as.Date(death_filt$Date)
#   death_filt$Patient <- as.factor(death_filt$Patient)
#
#   death_filt$Died <- "Death date"
#
# }
# # Add procedure
# for (i in  1:nrow(sub)){
#   singleProc=sub$`Sample date`[i]
#   tempDays=seq(min(as.Date(sub$InDate[i])),max(as.Date(sub$OutDate[i])), "day")
#   tempProc=seq(min(as.Date(sub$`Sample date`[i])),max(as.Date(sub$`Sample date`[i])), "day")
#   colproc=which(proc_dates %in% tempProc)
#   rowproc =which(proc_pt %in% sub$patient[i])
#   coldays <- which(singleProc %in% tempDays)
#   proc[rowproc,colproc] =paste(sub$`Sample date`[i])
#   proc_center[rowproc,coldays] =sub$unit[i]
# }
#
# #Trim procedure df
# colnames(proc) <- format(as.Date(dates, format= "%Y-%m-%d"), format= "%Y-%m-%d")
# proc_filt <- melt(as.table(proc))
# colnames(proc_filt) <- c("Patient", "Date", "Procedure")
# proc_filt <- proc_filt[complete.cases(proc_filt),]
# proc_filt$Patient <- as.factor(proc_filt$Patient)
# proc_filt$Date <- as.Date(proc_filt$Date)
# proc_filt$Procedure <- "Sampling date"
#
# #Trim procedure center df
no_pat <-sub("\\D+","", unique(sub$patient))
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
gather(key = "Event", value = "Date", `Sample date`, Died)%>%
filter(!is.na(Date))%>%
mutate(Event = ifelse(Event == "Died", "Death date", "Sampling date")) %>%
select(patient,Date,unit, Event)
View(procedure)
#### Prepare procedure ####
procedure <- sub %>%
gather(key = "Event", value = "Date", `Sample date`, Died)%>%
filter(!is.na(Date))%>%
mutate(Event = ifelse(Event == "Died", "Death date", "Sampling date")) %>%
select(patient,Date,unit, Event) %>%
distinct()
runApp()
#### Prepare procedure ####
procedure <- sub %>%
gather(key = "Event", value = "Date", `Sample date`, Died)%>%
filter(!is.na(Date))%>%
mutate(Patient = patient, Event = ifelse(Event == "Died", "Death date", "Sampling date")) %>%
select(patient,Date,unit, Event) %>%
distinct()
View(procedure)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(sub)
View(procedure)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(plyr)
library(xlsx)
library(lubridate)
library(tidyverse)
library(reshape2)
library(RColorBrewer)
library(gtools)
library(igraph)
library(ggnetwork)
library(sna)
library(anytime)
library(networkD3)
library(plotly)
library(ggraph)
library(ivs)
CPO <- read.csv("S:/DANMAP - AROR/46.DANMAP-labprojekter/46.36 ESBL undersøgelser/CPO_Udbrudsdata/Data fra Dias/EpiLinx_Lpr2_Lpr3_kontakter_forlob_2010_2019_dode_19DEC2024_13.01..csv",sep=";",stringsAsFactors = F,fileEncoding="latin1")
CPO <- read.csv("G:/PhD/Papers/EpiLinx/EpiLinx_Lpr2_Lpr3_kontakter_forlob_2010_2019_dode_06OCT2023_11.01..csv",sep=";",stringsAsFactors = F)
View(df)
no_pat <-sub
no_pat$patient <-as.character(as.numeric(sub("\\D+","",no_pat$patient)))
View(no_pat)
nodesfirst <- no_pat %>%
filter(patient %in% net()$Patient.1 | patient %in% net()$Patient.2) %>%
distinct(patient, .keep_all = TRUE)
df <- CPO
names(df)[names(df)=="MuligPatientUdbrudsnr"]<- "patient"
names(df)[names(df)=="dept_ind_dato"]<- "InDate"
names(df)[names(df)=="dept_ud_dato"]<- "OutDate"
names(df)[names(df)=="hospital_name"]<- "Hospital"
names(df)[names(df)=="name"]<- "Department"
names(df)[names(df)=="Provedato"]<- "Sample date"
names(df)[names(df)=="D_STATUS_HEN_START"] <- "Died"
names(df)[names(df)=="CPR_male"] <- "Gender"
names(df)[names(df)=="alder"] <- "Age"
df$Gender[df$Gender=="0"] <- "F"
df$Gender[df$Gender=="1"] <- "M"
df$InDate <- as.Date(df$InDate,format="%Y-%m-%d")
df$OutDate <- as.Date(df$OutDate,format="%Y-%m-%d")
df$`Sample date` <- as.Date(df$`Sample date`,format="%Y-%m-%d")
if(!all(is.na(df$Died))){
df$Died <- as.Date(df$Died,format="%Y-%m-%d")
}
if(!"Region" %in% names(df)){
df$Region <- ""
}
df <- df[order(df$patient),]
sub <. df
sub <- df
anonames <- paste0("Patient ",unique(sub$patient))
sub$patient <- factor(sub$patient, labels=anonames)
#############################################################
# Demographics
#############################################################
AGT <- NULL
if("Age" %in% colnames(sub)){
age_gender <- unique(sub[,c("patient","Age","Gender")])
age_gender$AgeGrp <- cut(age_gender$Age,breaks=c(0,10,20,30,40,50,60,70,80,90,100))
AGT <- age_gender %>% dplyr::group_by(Gender)%>%dplyr::summarize("No. of patients" = n(),
Median = median(Age),
"Min Age" = sprintf("%1.0f",min(Age)),
"Max Age" = sprintf("%1.0f",max(Age)))
output$AG_table <- renderDataTable(AGT,filter="top",options = list(
columnDefs = list(list(className = 'dt-center', targets = "_all"))))
#   ##### Age/Gender plot #####
if(!is.null(AGT)){
output$AGPlot <- renderPlot({
ggplot(age_gender,aes(x=AgeGrp,fill=Gender))+
geom_bar(position="dodge")+
labs(x = "Age group",y = "Number of patients")+
scale_y_continuous(breaks = function(x)seq(ceiling(x[1]),floor(x[2]),by=1))+
scale_fill_manual(values=c("M"="#00BFC4","F"="#F8766D"))
})
}
}
#############################################################
# Patients per region
#############################################################
regs <- sub %>%
group_by(Region, patient) %>%
slice(1) %>%
ungroup()
ggplot(age_gender,aes(x=AgeGrp,fill=Gender))+
geom_bar(position="dodge")+
labs(x = "Age group",y = "Number of patients")+
scale_y_continuous(breaks = function(x)seq(ceiling(x[1]),floor(x[2]),by=1))+
scale_fill_manual(values=c("M"="#00BFC4","F"="#F8766D"))
ggplot(age_gender,aes(x=AgeGrp,fill=Gender))+
geom_bar(position="dodge")+
labs(x = "Age group",y = "Number of patients")+
scale_y_continuous(breaks = function(x)seq(ceiling(x[1]),floor(x[2]),by=1))+
scale_fill_manual(values=c("M"="#00BFC4","F"="#F8766D"))
AGT <- age_gender %>% dplyr::group_by(Gender)%>%dplyr::summarize("No. of patients" = n(),
Median = median(Age),
"Min Age" = sprintf("%1.0f",min(Age)),
"Max Age" = sprintf("%1.0f",max(Age)))
ggplot(age_gender,aes(x=AgeGrp,fill=Gender))+
geom_bar(position="dodge")+
labs(x = "Age group",y = "Number of patients")+
scale_y_continuous(breaks = function(x)seq(ceiling(x[1]),floor(x[2]),by=1))+
scale_fill_manual(values=c("M"="#00BFC4","F"="#F8766D"))
View(age_gender)
#############################################################
# Patients per region
#############################################################
regs <- sub %>%
group_by(Region, patient) %>%
slice(1) %>%
ungroup()
ggplot(regs,aes(x=Region))+
geom_bar(position="dodge")+
labs(x = "Region",y = "Number of patients")
runApp()
ggplot(regs,aes(x=Region))+
geom_bar(position="dodge")+
labs(x = "Region",y = "Number of patients")
ggplot(regs,aes(x=Region))+
geom_bar(position="dodge")+
labs(x = "Region",y = "Number of patients")
View(regs)
ggplot(regs,aes(x=Region))+
geom_bar(position="dodge")+
labs(x = "Region",y = "Number of patients")
